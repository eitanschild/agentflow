{"ast":null,"code":"var _jsxFileName = \"/Users/eitanschild/Downloads/agentflow-landing/src/AgentFlowDemo.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AgentFlowDemo() {\n  _s();\n  const [input, setInput] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [output, setOutput] = useState(null);\n  const [error, setError] = useState(null);\n  async function generateCopy() {\n    if (!input.trim()) return;\n    setLoading(true);\n    setOutput(null);\n    setError(null);\n    try {\n      const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${import.meta.env.VITE_OPENAI_API_KEY}`\n        },\n        body: JSON.stringify({\n          model: \"gpt-4\",\n          messages: [{\n            role: \"system\",\n            content: \"You are a real estate AI assistant who helps agents write amazing listing descriptions, social captions, and email subject lines based on short property blurbs. Always return results in 3 sections: 1) Listing Description, 2) Instagram Caption, 3) Email Subject Line.\"\n          }, {\n            role: \"user\",\n            content: input\n          }]\n        })\n      });\n      const data = await response.json();\n      if (data.choices && data.choices.length > 0) {\n        setOutput(data.choices[0].message.content);\n      } else {\n        setError(\"Something went wrong. No response from AI.\");\n      }\n    } catch (err) {\n      setError(\"Failed to connect to OpenAI API.\");\n    } finally {\n      setLoading(false);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"w-full max-w-2xl text-center py-12\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-3xl font-bold mb-4\",\n      children: \"Try the AgentFlow Demo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-gray-600 mb-6\",\n      children: \"Enter a simple property blurb and let our AI generate your listing content!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      rows: 4,\n      className: \"w-full p-4 rounded-xl border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-400 resize-none mb-4\",\n      placeholder: \"e.g. Modern 2BR loft in downtown Austin with floor-to-ceiling windows and rooftop access\",\n      value: input,\n      onChange: e => setInput(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: generateCopy,\n      className: \"bg-blue-600 text-white px-6 py-3 rounded-full hover:bg-blue-700 transition mb-6\",\n      disabled: loading,\n      children: loading ? \"Generating...\" : \"Generate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-red-500\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }, this), output && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-left bg-white p-6 rounded-xl shadow-md space-y-4 text-gray-800 whitespace-pre-wrap\",\n      children: output\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n_s(AgentFlowDemo, \"xrakurm7yXY2R47iS0IG/8xkacs=\");\n_c = AgentFlowDemo;\nvar _c;\n$RefreshReg$(_c, \"AgentFlowDemo\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","AgentFlowDemo","_s","input","setInput","loading","setLoading","output","setOutput","error","setError","generateCopy","trim","response","fetch","method","headers","Authorization","import","meta","env","VITE_OPENAI_API_KEY","body","JSON","stringify","model","messages","role","content","data","json","choices","length","message","err","className","children","fileName","_jsxFileName","lineNumber","columnNumber","rows","placeholder","value","onChange","e","target","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/eitanschild/Downloads/agentflow-landing/src/AgentFlowDemo.jsx"],"sourcesContent":["import { useState } from \"react\";\n\nexport default function AgentFlowDemo() {\n  const [input, setInput] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [output, setOutput] = useState(null);\n  const [error, setError] = useState(null);\n\n  async function generateCopy() {\n    if (!input.trim()) return;\n\n    setLoading(true);\n    setOutput(null);\n    setError(null);\n\n    try {\n      const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${import.meta.env.VITE_OPENAI_API_KEY}`,\n        },\n        body: JSON.stringify({\n          model: \"gpt-4\",\n          messages: [\n            {\n              role: \"system\",\n              content: \"You are a real estate AI assistant who helps agents write amazing listing descriptions, social captions, and email subject lines based on short property blurbs. Always return results in 3 sections: 1) Listing Description, 2) Instagram Caption, 3) Email Subject Line.\",\n            },\n            {\n              role: \"user\",\n              content: input,\n            },\n          ],\n        }),\n      });\n\n      const data = await response.json();\n      if (data.choices && data.choices.length > 0) {\n        setOutput(data.choices[0].message.content);\n      } else {\n        setError(\"Something went wrong. No response from AI.\");\n      }\n    } catch (err) {\n      setError(\"Failed to connect to OpenAI API.\");\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  return (\n    <section className=\"w-full max-w-2xl text-center py-12\">\n      <h2 className=\"text-3xl font-bold mb-4\">Try the AgentFlow Demo</h2>\n      <p className=\"text-gray-600 mb-6\">\n        Enter a simple property blurb and let our AI generate your listing content!\n      </p>\n      <textarea\n        rows={4}\n        className=\"w-full p-4 rounded-xl border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-400 resize-none mb-4\"\n        placeholder=\"e.g. Modern 2BR loft in downtown Austin with floor-to-ceiling windows and rooftop access\"\n        value={input}\n        onChange={(e) => setInput(e.target.value)}\n      />\n      <button\n        onClick={generateCopy}\n        className=\"bg-blue-600 text-white px-6 py-3 rounded-full hover:bg-blue-700 transition mb-6\"\n        disabled={loading}\n      >\n        {loading ? \"Generating...\" : \"Generate\"}\n      </button>\n\n      {error && <p className=\"text-red-500\">{error}</p>}\n\n      {output && (\n        <div className=\"text-left bg-white p-6 rounded-xl shadow-md space-y-4 text-gray-800 whitespace-pre-wrap\">\n          {output}\n        </div>\n      )}\n    </section>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}